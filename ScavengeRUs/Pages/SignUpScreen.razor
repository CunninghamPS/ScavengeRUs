@page "/signUpScreen"
@inject NavigationManager UriHelper
@using ScavengeRUs.Models;
@using Syncfusion.Blazor.Popups


<!--  simple label and text box's for sighup screen will go back and make it look pretty later-->
<!-- Add validation to Nick's Work, the date validation is kind of trash though, because I don't know how to do regular expressions XD Josiah -->
<h3>SignUpScreen </h3>
  <br />
<EditForm Model="@Account" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <fieldset>
        <legend>Create Account</legend>
            
        <div>
            <label for="FirstName">First Name</label>
            <input type="text" id="FirstName" @bind-value="Account.FirstName" />
            <ValidationMessage For="@(() => Account.FirstName)"/>
                    <br />
        </div>
        <br />
        <div>
            <label for ="LastName">Last Name</label>
            <input type="text" id="LastName" @bind-value="Account.LastName" />
                <br />
        </div>
        <br />
        <div>
            <label for="EmailAddress">Email</label>
            <input type="text" id="EmailAddress" @bind-value="Account.Email"  />
                <br />
        </div>
        <br />
        <div>
            <label for="PhoneNumber">Phone Number</label>
            <input type="text" id="PhoneNumber" @bind-value="Account.PhoneNumber"  />
                <br />
        </div>
        <br />
        <div>
            <label for="DOB">Date of Birth</label>
            <input type="text" id="DOB" @bind-value="Account.DOB"  />
                <br />
        </div>
        <br />
        <div>
            <label for="Username">Username</label>
            <input type="text" id="Username" @bind-value="Account.UserName" />
                <br />
        </div>
        <br />
        <div>
            <label for="Password">Password</label>
            <input type="text" id="Password" @bind-value="Account.Password" />
                <br />
        </div>
        <br />
        <div>
              
                <br />
            <button class="btn btn-primary" @onclick=@NavigateTermsNCond>Terms & Conditions</button>
            <br />
            <label for="CheckAvailibility"></label>
            <br />
            <button class="btn btn-primary" @onclick="HandleValidSubmit" disabled="@SubmitBtnDisabled"> Submit</button>
        </div>
    </fieldset>
</EditForm>

<SfDialog Width="300px" Height="400px" IsModal="true" ResizeHandles="@dialogResizeDirections" AllowDragging="true" EnableResize="false" ShowCloseIcon="false" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Header>Terms and Conditions</Header>
        <Content>
            <p>Terms and Conditions will go here...</p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Agree" IsPrimary="true" OnClick="@OnSubmit" />
    </DialogButtons>
</SfDialog>


@code {
    private Account Account = new Account();
    private void HandleValidSubmit()
    {
        Console.WriteLine("Valid Submit");
    }
    void Navigate()
    {
        UriHelper.NavigateTo("/loginScreen");

    }
    void NavigateTermsNCond()
    {
        OpenDialog();
    }

    private bool IsVisible { get; set; } = false;
    private bool SubmitBtnDisabled { get; set; } = true;
    private string ErrorMessage { get; set; } = "";
    private ResizeDirection[] dialogResizeDirections { get; set; } = new ResizeDirection[] { ResizeDirection.All };

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void OnSubmit()
    {
        this.IsVisible = false;
        SubmitBtnDisabled = false;
    }

    private void Validation(BeforeCloseEventArgs args)
    {
        
    }
   
    
}

