@page "/loginScreen"
@inject NavigationManager NavigationManager

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <center> 
        <div>
            <br /> <br /> <br /> 
        </div>
        <div class="border col-5"> 
            <br />
            <div class="col-12">
                <h3 style = "color:#3998E8; font-weight: bold">ScavengeRUs Login</h3>
            </div>
            <div>
                <br />
                <h5 class="red">@feedback</h5>
                <br />
            </div>
            <div class="col-10">
                <input class="form-control inputs" @bind="@user.Email" placeholder="Email Address" />
            </div>
            <div>
                <br />
            </div>
            <div class="col-10">
                <input type="password" class="form-control inputs" @bind="@user.Password" placeholder="Password" />
            </div>
            <br />
            <div class="col-5">
                <input type="submit" class="form-control btn btn-primary" value="Login" />
            </div>
            <div>
                <br />
                <p>or</p>
                <div class="col-5">
                <button name="signupButton" class="form-control btn btn-primary" @onclick="SignUp">SignUp</button>
                <br /> <br />
            </div>
            </div>
        </div>
    </center>
            
</EditForm>


@code {
    private Models.Account user;
    private string feedback;

    protected override Task OnInitializedAsync()
    {
        user = new Models.Account();
        return base.OnInitializedAsync();
    }
    private async Task<bool> ValidateUser()
    {
        if(user.Email.Equals("William") && user.Password.Equals("Kinser"))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            feedback = "Wrong Username or Password";
        }

        return await Task.FromResult(true);
    }

    private async Task<bool> SignUp()
    {
        NavigationManager.NavigateTo("/signUpScreen");
        return await Task.FromResult(true);
    }

}

<style>
    .page {
    position: relative;
    display: flex;
    flex-direction: column;
    font-family: roboto, sans-serif;
    font-weight: 500;
    font-style: normal;
}

.inputs {
    margin-left: 20px;
}
.border{
    border: 2px solid;
    border-radius: 12px;
    padding: 5px
}
.red{
    color: red;
    font-size: small;
    font-style: italic;
}
</style>
