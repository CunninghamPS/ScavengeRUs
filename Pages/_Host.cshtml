@page "/"
@namespace ScavengeRUs.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";
}


    <environment include="Development">
        <link href="_content/Syncfusion.Blazor.Themes/bootstrap4.css" rel="stylesheet"/>
    </environment>

<script src="https://kit.fontawesome.com/4ea7244797.js" crossorigin="anonymous"></script>
<!--<script src="_framework/blazor.server.js"></script> !-->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQcsSU9qSgM-GUUMQDtFQnVAWM4o9APgc&v=3"></script>
<script src="_content/BlazorBarcodeScanner.ZXing.JS/zxingjs.index.min.js"></script>
<script src="_content/BlazorBarcodeScanner.ZXing.JS/BlazorBarcodeScanner.js"></script>


<!--Used in main ATM-->
 <script>
     function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 36.3024, lng: -82.3699},                                         //starting Lat and Lng
    zoom: 14,
    streetViewControl: false,
    zoomControl: false,
    mapTypeControl: false,
    fullscreenControl: false,
    mapId: 'ff0a13b563cab6a1'
  });
  infoWindow = new google.maps.InfoWindow();
  //creates class =for marker
         const blueCheck = {
           //google.maps.SymbolPath.CIRCLE
          path: "M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
          fillColor: "blue",
          fillOpacity: 1,
          strokeWeight: 0,
          rotation: 0,
          scale: 2,
          anchor: new google.maps.Point(15, 30),
        };

  const locationButton = document.createElement("button");
  const test = new Boolean(true);
  locationButton.textContent = "Update Location";
  locationButton.classList.add("custom-map-control-button");
  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
  locationButton.addEventListener("click", () => {
    // get users location after click
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          
          autoUpdate();
         map.setCenter(pos);
         playerMarker.setMap(null);
        },
        () => {
          handleLocationError(true, infoWindow, map.getCenter());
        }
      );
    } else {
      //  if Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
    
  });
}
//used if browser doesnt support geolocation
function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
  infoWindow.open(map);
}


 </script>

 <script>

     function autoUpdate() {
         const blueCheck = {
           //google.maps.SymbolPath.CIRCLE
          path: "M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
          fillColor: "#4FACFE",
          fillOpacity: 1,
          strokeWeight: 0,
          rotation: 0,
          scale: 2,
          anchor: new google.maps.Point(15, 30),
        };
      navigator.geolocation.getCurrentPosition(function(position) {  
       var newPoint = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

    var playerMarker =new google.maps.Marker({
            position: newPoint,
            icon: blueCheck,
            map,
            title: "user",
         });
   

    // Center the map on the new position
    map.setCenter(newPoint);
  }); 

  // Call the autoUpdate() function every 5 seconds
  setTimeout(autoUpdate, 5000);
  return playerMarker;
}
 </script>

<component type="typeof(App)" render-mode="ServerPrerendered" />

